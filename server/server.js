require("dotenv").config();
const express = require("express");
const cors = require("cors");
const { Telegraf } = require("telegraf");
const axios = require("axios");
const formatTelegramMessage = require("./utils/formattedTelegramMessage");

const users = new Map();
// –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –±–µ–∑ @ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Ñ–æ—Ä–º—ã
const TELEGRAM_USERNAME = process.env.TG_USER;
// –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç BotFather
const TELEGRAM_BOT_API = process.env.TG_BOT;
// –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –æ—Ç Yandex GeoSuggest API https://yandex.ru/maps-api/docs/suggest-api/response.html
const YANDEX_SUGGEST_API = process.env.YANDEX_API;
const bot = new Telegraf(TELEGRAM_BOT_API);
bot.start((ctx) => {
  const username = ctx.from.username;
  const chatId = ctx.chat.id;
  if (username === TELEGRAM_USERNAME) {
    users.set(username, chatId);
    ctx.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.");
  }
});
bot.launch();

const app = express();
app.use(cors());
app.use(express.json());

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ —Ñ–æ—Ä–º—ã
app.post("/telegram/notify", async (req, res) => {
  if (!users.has(TELEGRAM_USERNAME)) {
    res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    return;
  }

  const chatId = users.get(TELEGRAM_USERNAME);
  const formattedMessage = formatTelegramMessage(req.body);

  try {
    await bot.telegram.sendMessage(chatId, formattedMessage, { parse_mode: "HTML" });
    res.status(200).json({ message: "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error);
    if (error.code === 403) {
      users.delete(TELEGRAM_USERNAME);
      res.status(403).json({ message: "–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º" });
      return;
    }
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è" });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.get("/suggest", async (req, res) => {
  const text = req.query.text;
  if (!text) {
    res.status(400).json({ message: "–ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" });
    return;
  }

  try {
    const response = await axios.get(
      `https://suggest-maps.yandex.ru/v1/suggest?apikey=${YANDEX_SUGGEST_API}&text=${text}&print_address=1&attrs=uri&lang=ru_RU`,
    );
    res.status(200).json(response.data);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Yandex Suggest API:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ 3000 –ø–æ—Ä—Ç—É
app.listen(3000, () => {
  console.log("Server is running on port 3000");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
process.on("SIGINT", async () => {
  console.log("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...");

  if (users.has(TELEGRAM_USERNAME)) {
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${TELEGRAM_USERNAME}...`);
    try {
      await bot.telegram.sendMessage(
        users.get(TELEGRAM_USERNAME),
        "üî¥ –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É. –í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
      );
      console.log("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
    }
    users.delete(TELEGRAM_USERNAME);
  }

  try {
    await bot.stop("SIGINT");
    console.log("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞:", error);
  }

  process.exit(0);
});
